> input: "list a b ; def f it ; a + b ; end f "
# phrase: list a b  ; def f it  ; a + b  ; end f  ; 
#   0   expr: list a b 
#   0   seme: ( list a b ) 
#   0  value: ( 'list 'a 'b ) 
##  reduce_items (0) entry: ( 'list 'a 'b ) 
##  reduce_items (0) exit: from ( 'list 'a 'b ) 
##  reduce_items (0) ...   to ( `list 'a 'b ) 
##  interp_seq (0) entry: ( `list 'a 'b ) 
##  interp_seq resolved: ( `list 'a 'b ) 
##  interp_seq reduced: ( { 'a 'b } ) 
#   0 reduce: [Ok , { 'a 'b }  ]
#   0 env:
# env:
#	state: Ok 
#	it = { 'a 'b } 
#   1   expr: def f it 
#   1   seme: ( def f it ) 
#   1  value: ( 'def 'f 'it ) 
##  reduce_items (0) entry: ( 'def 'f 'it ) 
##  reduce_items (0) exit: from ( 'def 'f 'it ) 
##  reduce_items (0) ...   to ( `def 'f 'it ) 
##  interp_seq (0) entry: ( `def 'f 'it ) 
##  interp_seq resolved: ( `def 'f { 'a 'b } ) 
##  reduce_items (0) entry: { 'a 'b } 
##  reduce_items (0) exit: from { 'a 'b } 
##  reduce_items (0) ...   to { 'a 'b } 
##  interp_seq reduced: ( `(f ('a 'b ) x0 = ) ) 
#   1 reduce: [Fun , `(f ('a 'b ) x0 = )  ]
#   1 env:
# env:
#	state: Fun 
#	it = `(f ('a 'b ) x0 = ) 
#   2   expr: a + b 
#   2   seme: ( a + b ) 
#   2  value: ( 'a '+ 'b ) 
##  reduce_items (0) entry: ( 'a '+ 'b ) 
##  reduce_items (0) exit: from ( 'a '+ 'b ) 
##  reduce_items (0) ...   to ( 'a `+ 'b ) 
##  interp_seq (0) entry: ( 'a `+ 'b ) 
#   2 reduce: [Fun , `(f ('a 'b ) x1 = ( 'a `+ 'b ) )  ]
#   2 env:
# env:
#	state: Fun 
#	it = `(f ('a 'b ) x1 = ( 'a `+ 'b ) ) 
#   3   expr: end f 
#   3   seme: ( end f ) 
#   3  value: ( 'end 'f ) 
##  reduce_items (0) entry: ( 'end 'f ) 
##  reduce_items (0) exit: from ( 'end 'f ) 
##  reduce_items (0) ...   to ( `end 'f ) 
##  interp_seq (0) entry: ( `end 'f ) 
##  interp_seq resolved: ( `end 'f ) 
##  interp_seq reduced: ( `(f ('a 'b ) x1 = ( 'a `+ 'b ) ) ) 
#   3 reduce: [Ok , `(f ('a 'b ) x1 = ( 'a `+ 'b ) )  ]
#   3 env:
# env:
#	state: Ok 
#	it = `(f ('a 'b ) x1 = ( 'a `+ 'b ) ) 
#	f = `(f ('a 'b ) x1 = ( 'a `+ 'b ) ) 
> input: "f (1, 2)"
# phrase: f (1, 2) ; 
#   0   expr: f (1, 2)
#   0   seme: ( f { 1N 2N } ) 
#   0  value: ( 'f { 1 2 } ) 
##  reduce_items (0) entry: ( 'f { 1 2 } ) 
##  reduce_items (0) entry: { 1 2 } 
##  reduce_items (0) exit: from { 1 2 } 
##  reduce_items (0) ...   to { 1 2 } 
##  reduce_items (0) exit: from ( 'f { 1 2 } ) 
##  reduce_items (0) ...   to ( 'f { 1 2 } ) 
##  interp_seq (0) entry: ( 'f { 1 2 } ) 
##  interp_seq resolved: ( `(f ('a 'b ) x1 = ( 'a `+ 'b ) ) { 1 2 } ) 
##  reduce_items (1) entry: { 1 2 } 
##  reduce_items (1) exit: from { 1 2 } 
##  reduce_items (1) ...   to { 1 2 } 
##  reduce_fun value: ( 'a `+ 'b ) 
##  reduce_items (0) entry: ( 'a `+ 'b ) 
##  reduce_items (0) exit: from ( 'a `+ 'b ) 
##  reduce_items (0) ...   to ( 'a `+ 'b ) 
##  interp_seq (0) entry: ( 'a `+ 'b ) 
##  interp_seq resolved: ( 'a `+ 'b ) 
##  interp_seq reduced: ( 3 ) 
##  reduce_fun reduce: [Ok , 3  ]
##  reduce_fun local:
## env:
##	state: Ok 
##	a = 1 
##	b = 2 
##	it = 3 
## parent ## env:
##	state: Ok 
##	it = `(f ('a 'b ) x1 = ( 'a `+ 'b ) ) 
##	f = `(f ('a 'b ) x1 = ( 'a `+ 'b ) ) 
##  interp_seq reduced: ( 3 ) 
#   0 reduce: [Ok , 3  ]
#   0 env:
# env:
#	state: Ok 
#	it = 3 
#	f = `(f ('a 'b ) x1 = ( 'a `+ 'b ) ) 
> input: "print it"
# phrase: print it ; 
#   0   expr: print it
#   0   seme: ( print it ) 
#   0  value: ( 'print 'it ) 
##  reduce_items (0) entry: ( 'print 'it ) 
##  reduce_items (0) exit: from ( 'print 'it ) 
##  reduce_items (0) ...   to ( `print 'it ) 
##  interp_seq (0) entry: ( `print 'it ) 
##  interp_seq resolved: ( `print 3 ) 
3 
##  interp_seq reduced: ( 3 ) 
#   0 reduce: [Ok , 3  ]
#   0 env:
# env:
#	state: Ok 
#	it = 3 
#	f = `(f ('a 'b ) x1 = ( 'a `+ 'b ) ) 
> exit
> env:
>	state: Ok 
>	it = 3 
>	f = `(f ('a 'b ) x1 = ( 'a `+ 'b ) ) 
