> input: "* ; call it op1; call op1 op2; call op2 op3"
# phrase: *  ; call it op1 ; call op1 op2 ; call op2 op3 ; 
#   0   expr: * 
#   0   seme: ( * ) 
#   0  value: ( '* ) 
##  reduce_items (0) entry: ( '* ) 
##  reduce_items (0) exit: from ( '* ) 
##  reduce_items (0) ...   to ( `* ) 
##  interp_seq (0) entry: ( `* ) 
##  interp_seq resolved: ( `* ) 
#   0 reduce: [Ok , `*  ]
#   0 env:
# env:
#	state: Ok 
#	it = `* 
#   1   expr: call it op1
#   1   seme: ( call it op1 ) 
#   1  value: ( 'call 'it 'op1 ) 
##  reduce_items (0) entry: ( 'call 'it 'op1 ) 
##  reduce_items (0) exit: from ( 'call 'it 'op1 ) 
##  reduce_items (0) ...   to ( `call 'it 'op1 ) 
##  interp_seq (0) entry: ( `call 'it 'op1 ) 
##  interp_seq resolved: ( `call `* 'op1 ) 
##  interp_seq reduced: ( `* ) 
#   1 reduce: [Ok , `*  ]
#   1 env:
# env:
#	state: Ok 
#	it = `* 
#	op1 = `* 
#   2   expr: call op1 op2
#   2   seme: ( call op1 op2 ) 
#   2  value: ( 'call 'op1 'op2 ) 
##  reduce_items (0) entry: ( 'call 'op1 'op2 ) 
##  reduce_items (0) exit: from ( 'call 'op1 'op2 ) 
##  reduce_items (0) ...   to ( `call 'op1 'op2 ) 
##  interp_seq (0) entry: ( `call 'op1 'op2 ) 
##  interp_seq resolved: ( `call `* 'op2 ) 
##  interp_seq reduced: ( `* ) 
#   2 reduce: [Ok , `*  ]
#   2 env:
# env:
#	state: Ok 
#	it = `* 
#	op1 = `* 
#	op2 = `* 
#   3   expr: call op2 op3
#   3   seme: ( call op2 op3 ) 
#   3  value: ( 'call 'op2 'op3 ) 
##  reduce_items (0) entry: ( 'call 'op2 'op3 ) 
##  reduce_items (0) exit: from ( 'call 'op2 'op3 ) 
##  reduce_items (0) ...   to ( `call 'op2 'op3 ) 
##  interp_seq (0) entry: ( `call 'op2 'op3 ) 
##  interp_seq resolved: ( `call `* 'op3 ) 
##  interp_seq reduced: ( `* ) 
#   3 reduce: [Ok , `*  ]
#   3 env:
# env:
#	state: Ok 
#	it = `* 
#	op1 = `* 
#	op2 = `* 
#	op3 = `* 
> input: "2, op3, 4. ; do it; print it"
# phrase: 2, op3, 4.  ; do it ; print it ; 
#   0   expr: 2, op3, 4. 
#   0   seme: { 2N op3 4.00R } 
#   0  value: { 2 'op3 4.00 } 
##  reduce_items (0) entry: { 2 'op3 4.00 } 
##  reduce_items (0) exit: from { 2 'op3 4.00 } 
##  reduce_items (0) ...   to { 2 'op3 4.00 } 
#   0 reduce: [Ok , { 2 'op3 4.00 }  ]
#   0 env:
# env:
#	state: Ok 
#	it = { 2 'op3 4.00 } 
#	op1 = `* 
#	op2 = `* 
#	op3 = `* 
#   1   expr: do it
#   1   seme: ( do it ) 
#   1  value: ( 'do 'it ) 
##  reduce_items (0) entry: ( 'do 'it ) 
##  reduce_items (0) exit: from ( 'do 'it ) 
##  reduce_items (0) ...   to ( `do 'it ) 
##  interp_seq (0) entry: ( `do 'it ) 
##  interp_seq resolved: ( `do { 2 'op3 4.00 } ) 
##  reduce_items (0) entry: { 2 'op3 4.00 } 
##  reduce_items (0) exit: from { 2 'op3 4.00 } 
##  reduce_items (0) ...   to { 2 'op3 4.00 } 
##  reduce_items (0) entry: ( 2 'op3 4.00 ) 
##  reduce_items (0) exit: from ( 2 'op3 4.00 ) 
##  reduce_items (0) ...   to ( 2 'op3 4.00 ) 
##  interp_seq (0) entry: ( 2 'op3 4.00 ) 
##  interp_seq resolved: ( 2 `* 4.00 ) 
##  interp_seq reduced: ( 8.00 ) 
##  interp_seq reduced: ( 8.00 ) 
#   1 reduce: [Ok , 8.00  ]
#   1 env:
# env:
#	state: Ok 
#	it = 8.00 
#	op1 = `* 
#	op2 = `* 
#	op3 = `* 
#   2   expr: print it
#   2   seme: ( print it ) 
#   2  value: ( 'print 'it ) 
##  reduce_items (0) entry: ( 'print 'it ) 
##  reduce_items (0) exit: from ( 'print 'it ) 
##  reduce_items (0) ...   to ( `print 'it ) 
##  interp_seq (0) entry: ( `print 'it ) 
##  interp_seq resolved: ( `print 8.00 ) 
8.00 
##  interp_seq reduced: ( 8.00 ) 
#   2 reduce: [Ok , 8.00  ]
#   2 env:
# env:
#	state: Ok 
#	it = 8.00 
#	op1 = `* 
#	op2 = `* 
#	op3 = `* 
> exit
> env:
>	state: Ok 
>	it = 8.00 
>	op1 = `* 
>	op2 = `* 
>	op3 = `* 
