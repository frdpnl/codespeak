# ----line: "define f () ; 1 ; end f"
# --phrase: define f ()  ; 1  ; end f ; 
#   0  expr: define f () 
#   0  seme: ( define f Nil ) 
#   0 value: ( `define 'f Nil ) 
#   0 interp: [Fun , `(f () 0 val)  ]
#   1  expr: 1 
#   1  seme: ( 1N ) 
#   1 value: ( 1 ) 
#   1 interp: [Fun , `(f () 1 val)  ]
#   2  expr: end f
#   2  seme: ( end f ) 
#   2 value: ( `end 'f ) 
#   2 interp: [Ok , `(f () 1 val)  ]
Ok 
it = `(f () 1 val) 
f = `(f () 1 val) 
# ----line: "f () ; print it"
# --phrase: f ()  ; print it ; 
#   0  expr: f () 
#   0  seme: ( f Nil ) 
#   0 value: ( `(f () 1 val) Nil ) 
- interp_fun value: ( 1 ) 
- interp_fun interp: [Ok , 1  ]
Ok 
it = 1 
parent:
Ok 
it = `(f () 1 val) 
f = `(f () 1 val) 
#   0 interp: [Ok , 1  ]
#   1  expr: print it
#   1  seme: ( print it ) 
#   1 value: ( `print 1 ) 
1 
#   1 interp: [Ok , 1  ]
Ok 
it = 1 
f = `(f () 1 val) 
