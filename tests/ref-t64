> input: "list a b"
# phrase: list a b ; 
#   0   expr: list a b
#   0   seme: ( list a b ) 
#   0  value: ( 'list 'a 'b ) 
##  reduce_items (0) entry: ( 'list 'a 'b ) 
##  interp_seq (0) entry: ( `list 'a 'b ) 
##  interp_seq resolved: ( `list 'a 'b ) 
##  interp_seq reduced: ( { 'a 'b } ) 
#   0 reduce: [Ok , { 'a 'b }  ]
#   0 env:
# env:
#	state: Ok 
#	it = { 'a 'b } 
> input: "def f it ; () ; () ; a - b ; end f "
# phrase: def f it  ; ()  ; ()  ; a - b  ; end f  ; 
#   0   expr: def f it 
#   0   seme: ( def f it ) 
#   0  value: ( 'def 'f 'it ) 
##  reduce_items (0) entry: ( 'def 'f 'it ) 
##  interp_seq (0) entry: ( `def 'f 'it ) 
##  interp_seq resolved: ( `def 'f { 'a 'b } ) 
##  reduce_items (0) entry: { 'a 'b } 
##  interp_seq reduced: ( `(f ('a 'b ) =0= ) ) 
#   0 reduce: [Fun , `(f ('a 'b ) =0= )  ]
#   0 env:
# env:
#	state: Fun 
#	it = `(f ('a 'b ) =0= ) 
#   1   expr: () 
#   1   seme: ( Nil ) 
#   1  value: ( Nil ) 
##  reduce_items (0) entry: ( Nil ) 
##  interp_seq (0) entry: ( Nil ) 
#   1 reduce: [Fun , `(f ('a 'b ) =1= ( Nil ) )  ]
#   1 env:
# env:
#	state: Fun 
#	it = `(f ('a 'b ) =1= ( Nil ) ) 
#   2   expr: () 
#   2   seme: ( Nil ) 
#   2  value: ( Nil ) 
##  reduce_items (0) entry: ( Nil ) 
##  interp_seq (0) entry: ( Nil ) 
#   2 reduce: [Fun , `(f ('a 'b ) =2= ( Nil ) ( Nil ) )  ]
#   2 env:
# env:
#	state: Fun 
#	it = `(f ('a 'b ) =2= ( Nil ) ( Nil ) ) 
#   3   expr: a - b 
#   3   seme: ( a - b ) 
#   3  value: ( 'a '- 'b ) 
##  reduce_items (0) entry: ( 'a '- 'b ) 
##  interp_seq (0) entry: ( 'a `- 'b ) 
#   3 reduce: [Fun , `(f ('a 'b ) =3= ( Nil ) ( Nil ) ( 'a `- 'b ) )  ]
#   3 env:
# env:
#	state: Fun 
#	it = `(f ('a 'b ) =3= ( Nil ) ( Nil ) ( 'a `- 'b ) ) 
#   4   expr: end f 
#   4   seme: ( end f ) 
#   4  value: ( 'end 'f ) 
##  reduce_items (0) entry: ( 'end 'f ) 
##  interp_seq (0) entry: ( `end 'f ) 
##  interp_seq resolved: ( `end 'f ) 
##  interp_seq reduced: ( `(f ('a 'b ) =3= ( Nil ) ( Nil ) ( 'a `- 'b ) ) ) 
#   4 reduce: [Ok , `(f ('a 'b ) =3= ( Nil ) ( Nil ) ( 'a `- 'b ) )  ]
#   4 env:
# env:
#	state: Ok 
#	it = `(f ('a 'b ) =3= ( Nil ) ( Nil ) ( 'a `- 'b ) ) 
#	f = `(f ('a 'b ) =3= ( Nil ) ( Nil ) ( 'a `- 'b ) ) 
> input: "f (1, 2)"
# phrase: f (1, 2) ; 
#   0   expr: f (1, 2)
#   0   seme: ( f { 1N 2N } ) 
#   0  value: ( 'f { 1 2 } ) 
##  reduce_items (0) entry: ( 'f { 1 2 } ) 
##  reduce_items (0) entry: { 1 2 } 
##  interp_seq (0) entry: ( 'f { 1 2 } ) 
##  interp_seq resolved: ( `(f ('a 'b ) =3= ( Nil ) ( Nil ) ( 'a `- 'b ) ) { 1 2 } ) 
##  reduce_items (1) entry: { 1 2 } 
##  reduce_fun value: ( Nil ) 
##  reduce_items (0) entry: ( Nil ) 
##  interp_seq (0) entry: ( Nil ) 
##  interp_seq resolved: ( Nil ) 
##  reduce_fun reduce: [Ok , Nil  ]
##  reduce_fun value: ( Nil ) 
##  reduce_items (0) entry: ( Nil ) 
##  interp_seq (0) entry: ( Nil ) 
##  interp_seq resolved: ( Nil ) 
##  reduce_fun reduce: [Ok , Nil  ]
##  reduce_fun value: ( 'a `- 'b ) 
##  reduce_items (0) entry: ( 'a `- 'b ) 
##  interp_seq (0) entry: ( 'a `- 'b ) 
##  interp_seq resolved: ( 'a `- 'b ) 
##  interp_seq reduced: ( -1 ) 
##  reduce_fun reduce: [Ok , -1  ]
##  reduce_fun local:
## env:
##	state: Ok 
##	a = 1 
##	b = 2 
##	it = -1 
## parent ## env:
##	state: Ok 
##	it = `(f ('a 'b ) =3= ( Nil ) ( Nil ) ( 'a `- 'b ) ) 
##	f = `(f ('a 'b ) =3= ( Nil ) ( Nil ) ( 'a `- 'b ) ) 
##  interp_seq reduced: ( -1 ) 
#   0 reduce: [Ok , -1  ]
#   0 env:
# env:
#	state: Ok 
#	it = -1 
#	f = `(f ('a 'b ) =3= ( Nil ) ( Nil ) ( 'a `- 'b ) ) 
> main: exit
> env:
>	state: Ok 
>	it = -1 
>	f = `(f ('a 'b ) =3= ( Nil ) ( Nil ) ( 'a `- 'b ) ) 
