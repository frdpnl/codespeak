> input: "call 2 n"
> input: "loop "
> input: "	def f (a,) ; a ; end f"
> input: "	if n = 0 ; stop ; end if"
> input: "	call (n - 1) n;"
> input: "	env"
> input: "end loop"
> env:
> state: Ok 
> __it__ = 1 
> __nested_loops__ = 0 
> n = 1 
> f = 
> `f ('a ) [1]:
>    ( 'a ) 
? reduce_def: expecting symbol for function name, got `f 
