> input: "call 3 n"
# phrase: call 3 n ; 
#   0   expr: call 3 n
#   0   seme: ( call 3N n ) 
#   0  value: ( 'call 3 'n ) 
##  reduce_items (0) entry: ( 'call 3 'n ) 
##  reduce_items (0) exit: from ( 'call 3 'n ) 
##  reduce_items (0) ...   to ( `call 3 'n ) 
##  interp_seq (0) entry: ( `call 3 'n ) 
##  interp_seq resolved: ( `call 3 'n ) 
##  interp_seq reduced: ( 3 ) 
#   0 reduce: [Ok , 3  ]
#   0 env:
# env:
#	state: Ok 
#	n = 3 
#	it = 3 
> input: "def f (a,) ; if a > 1 ; print n ; end if ; end f"
# phrase: def f (a,)  ; if a > 1  ; print n  ; end if  ; end f ; 
#   0   expr: def f (a,) 
#   0   seme: ( def f { a } ) 
#   0  value: ( 'def 'f { 'a } ) 
##  reduce_items (0) entry: ( 'def 'f { 'a } ) 
##  reduce_items (0) entry: { 'a } 
##  reduce_items (0) exit: from { 'a } 
##  reduce_items (0) ...   to { 'a } 
##  reduce_items (0) exit: from ( 'def 'f { 'a } ) 
##  reduce_items (0) ...   to ( `def 'f { 'a } ) 
##  interp_seq (0) entry: ( `def 'f { 'a } ) 
##  interp_seq resolved: ( `def 'f { 'a } ) 
##  reduce_items (0) entry: { 'a } 
##  reduce_items (0) exit: from { 'a } 
##  reduce_items (0) ...   to { 'a } 
##  interp_seq reduced: ( `(f ('a ) x0 = ) ) 
#   0 reduce: [Fun , `(f ('a ) x0 = )  ]
#   0 env:
# env:
#	state: Fun 
#	n = 3 
#	it = `(f ('a ) x0 = ) 
#   1   expr: if a > 1 
#   1   seme: ( if a > 1N ) 
#   1  value: ( 'if 'a '> 1 ) 
##  reduce_items (0) entry: ( 'if 'a '> 1 ) 
##  reduce_items (0) exit: from ( 'if 'a '> 1 ) 
##  reduce_items (0) ...   to ( `if 'a `> 1 ) 
##  interp_seq (0) entry: ( `if 'a `> 1 ) 
#   1 reduce: [Fun , `(f ('a ) x1 = ( `if 'a `> 1 ) )  ]
#   1 env:
# env:
#	state: Fun 
#	n = 3 
#	it = `(f ('a ) x1 = ( `if 'a `> 1 ) ) 
#   2   expr: print n 
#   2   seme: ( print n ) 
#   2  value: ( 'print 'n ) 
##  reduce_items (0) entry: ( 'print 'n ) 
##  reduce_items (0) exit: from ( 'print 'n ) 
##  reduce_items (0) ...   to ( `print 'n ) 
##  interp_seq (0) entry: ( `print 'n ) 
## reduce_body: replacing free 'n  with 3 
#   2 reduce: [Fun , `(f ('a ) x2 = ( `if 'a `> 1 ) ( `print 3 ) )  ]
#   2 env:
# env:
#	state: Fun 
#	n = 3 
#	it = `(f ('a ) x2 = ( `if 'a `> 1 ) ( `print 3 ) ) 
#   3   expr: end if 
#   3   seme: ( end if ) 
#   3  value: ( 'end 'if ) 
##  reduce_items (0) entry: ( 'end 'if ) 
##  reduce_items (0) exit: from ( 'end 'if ) 
##  reduce_items (0) ...   to ( `end `if ) 
##  interp_seq (0) entry: ( `end `if ) 
##  interp_seq resolved: ( `end `if ) 
##  interp_seq reduced: ( `(f ('a ) x3 = ( `if 'a `> 1 ) ( `print 3 ) ( `end `if ) ) ) 
#   3 reduce: [Fun , `(f ('a ) x3 = ( `if 'a `> 1 ) ( `print 3 ) ( `end `if ) )  ]
#   3 env:
# env:
#	state: Fun 
#	n = 3 
#	it = `(f ('a ) x3 = ( `if 'a `> 1 ) ( `print 3 ) ( `end `if ) ) 
#   4   expr: end f
#   4   seme: ( end f ) 
#   4  value: ( 'end 'f ) 
##  reduce_items (0) entry: ( 'end 'f ) 
##  reduce_items (0) exit: from ( 'end 'f ) 
##  reduce_items (0) ...   to ( `end 'f ) 
##  interp_seq (0) entry: ( `end 'f ) 
##  interp_seq resolved: ( `end 'f ) 
##  interp_seq reduced: ( `(f ('a ) x3 = ( `if 'a `> 1 ) ( `print 3 ) ( `end `if ) ) ) 
#   4 reduce: [Ok , `(f ('a ) x3 = ( `if 'a `> 1 ) ( `print 3 ) ( `end `if ) )  ]
#   4 env:
# env:
#	state: Ok 
#	n = 3 
#	it = `(f ('a ) x3 = ( `if 'a `> 1 ) ( `print 3 ) ( `end `if ) ) 
#	f = `(f ('a ) x3 = ( `if 'a `> 1 ) ( `print 3 ) ( `end `if ) ) 
> input: "call 4 n"
# phrase: call 4 n ; 
#   0   expr: call 4 n
#   0   seme: ( call 4N n ) 
#   0  value: ( 'call 4 'n ) 
##  reduce_items (0) entry: ( 'call 4 'n ) 
##  reduce_items (0) exit: from ( 'call 4 'n ) 
##  reduce_items (0) ...   to ( `call 4 'n ) 
##  interp_seq (0) entry: ( `call 4 'n ) 
##  interp_seq resolved: ( `call 4 'n ) 
##  interp_seq reduced: ( 4 ) 
#   0 reduce: [Ok , 4  ]
#   0 env:
# env:
#	state: Ok 
#	n = 4 
#	it = 4 
#	f = `(f ('a ) x3 = ( `if 'a `> 1 ) ( `print 3 ) ( `end `if ) ) 
> input: "f (2,)"
# phrase: f (2,) ; 
#   0   expr: f (2,)
#   0   seme: ( f { 2N } ) 
#   0  value: ( 'f { 2 } ) 
##  reduce_items (0) entry: ( 'f { 2 } ) 
##  reduce_items (0) entry: { 2 } 
##  reduce_items (0) exit: from { 2 } 
##  reduce_items (0) ...   to { 2 } 
##  reduce_items (0) exit: from ( 'f { 2 } ) 
##  reduce_items (0) ...   to ( 'f { 2 } ) 
##  interp_seq (0) entry: ( 'f { 2 } ) 
##  interp_seq resolved: ( `(f ('a ) x3 = ( `if 'a `> 1 ) ( `print 3 ) ( `end `if ) ) { 2 } ) 
##  reduce_items (1) entry: { 2 } 
##  reduce_items (1) exit: from { 2 } 
##  reduce_items (1) ...   to { 2 } 
##  reduce_fun value: ( `if 'a `> 1 ) 
##  reduce_items (0) entry: ( `if 'a `> 1 ) 
##  reduce_items (0) exit: from ( `if 'a `> 1 ) 
##  reduce_items (0) ...   to ( `if 'a `> 1 ) 
##  interp_seq (0) entry: ( `if 'a `> 1 ) 
##  interp_seq resolved: ( `if 'a `> 1 ) 
##  interp_seq reduced: ( `if 1 ) 
##  interp_seq reduced: ( 1 ) 
##  reduce_fun reduce: [Ok , 1  ]
##  reduce_fun value: ( `print 3 ) 
##  reduce_items (0) entry: ( `print 3 ) 
##  reduce_items (0) exit: from ( `print 3 ) 
##  reduce_items (0) ...   to ( `print 3 ) 
##  interp_seq (0) entry: ( `print 3 ) 
##  interp_seq resolved: ( `print 3 ) 
3 
##  interp_seq reduced: ( 3 ) 
##  reduce_fun reduce: [Ok , 3  ]
##  reduce_fun value: ( `end `if ) 
##  reduce_items (0) entry: ( `end `if ) 
##  reduce_items (0) exit: from ( `end `if ) 
##  reduce_items (0) ...   to ( `end `if ) 
##  interp_seq (0) entry: ( `end `if ) 
##  interp_seq resolved: ( `end `if ) 
##  interp_seq reduced: ( 3 ) 
##  reduce_fun reduce: [Ok , 3  ]
##  reduce_fun local:
## env:
##	state: Ok 
##	a = 2 
##	it = 3 
## parent ## env:
##	state: Ok 
##	n = 4 
##	it = 4 
##	f = `(f ('a ) x3 = ( `if 'a `> 1 ) ( `print 3 ) ( `end `if ) ) 
##  interp_seq reduced: ( 3 ) 
#   0 reduce: [Ok , 3  ]
#   0 env:
# env:
#	state: Ok 
#	n = 4 
#	it = 3 
#	f = `(f ('a ) x3 = ( `if 'a `> 1 ) ( `print 3 ) ( `end `if ) ) 
> exit
> env:
>	state: Ok 
>	n = 4 
>	it = 3 
>	f = `(f ('a ) x3 = ( `if 'a `> 1 ) ( `print 3 ) ( `end `if ) ) 
