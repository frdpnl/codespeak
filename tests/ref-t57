# ----line: "call 3 n"
# --phrase: call 3 n ; 
#   0  expr: call 3 n
#   0  seme: ( call 3N n ) 
#   0 value: ( `call 3 'n ) 
#   0 reduce: [Ok , 3  ]
Ok 
n = 3 
it = 3 
# ----line: "def f (a,) ; if a > 1 ; print n ; end if ; end f"
# --phrase: def f (a,)  ; if a > 1  ; print n  ; end if  ; end f ; 
#   0  expr: def f (a,) 
#   0  seme: ( def f { a } ) 
#   0 value: ( `def 'f { 'a } ) 
#   0 reduce: [Fun , `(f ('a ) 0 val)  ]
#   1  expr: if a > 1 
#   1  seme: ( if a > 1N ) 
#   1 value: ( `if 'a `> 1 ) 
#   1 reduce: [Fun , `(f ('a ) 1 val)  ]
#   2  expr: print n 
#   2  seme: ( print n ) 
#   2 value: ( `print 'n ) 
#   2 reduce: [Fun , `(f ('a ) 2 val)  ]
#   3  expr: end if 
#   3  seme: ( end if ) 
#   3 value: ( `end `if ) 
#   3 reduce: [Fun , `(f ('a ) 3 val)  ]
#   4  expr: end f
#   4  seme: ( end f ) 
#   4 value: ( `end 'f ) 
#   4 reduce: [Ok , `(f ('a ) 3 val)  ]
Ok 
n = 3 
it = `(f ('a ) 3 val) 
f = `(f ('a ) 3 val) 
# ----line: "call 4 n"
# --phrase: call 4 n ; 
#   0  expr: call 4 n
#   0  seme: ( call 4N n ) 
#   0 value: ( `call 4 'n ) 
#   0 reduce: [Ok , 4  ]
Ok 
n = 4 
it = 4 
f = `(f ('a ) 3 val) 
# ----line: "f (2,)"
# --phrase: f (2,) ; 
#   0  expr: f (2,)
#   0  seme: ( f { 2N } ) 
#   0 value: ( `(f ('a ) 3 val) { 2 } ) 
- reduce_fun value: ( `if 'a `> 1 ) 
- reduce_fun reduce: [Ok , 1  ]
- reduce_fun value: ( `print 3 ) 
3 
- reduce_fun reduce: [Ok , 3  ]
- reduce_fun value: ( `end `if ) 
- reduce_fun reduce: [Ok , 3  ]
Ok 
a = 2 
it = 3 
parent:
Ok 
n = 4 
it = 4 
f = `(f ('a ) 3 val) 
#   0 reduce: [Ok , 3  ]
Ok 
n = 4 
it = 3 
f = `(f ('a ) 3 val) 
