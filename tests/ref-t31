> input: "define f (a,) ; 1 ; end f"
# phrase: define f (a,)  ; 1  ; end f ; 
#   0   expr: define f (a,) 
#   0   seme: ( define f { a } ) 
#   0  value: ( 'define 'f { 'a } ) 
##  reduce_items (0) entry: ( 'define 'f { 'a } ) 
##  reduce_items (0) entry: { 'a } 
##  reduce_items (0) exit: from { 'a } 
##  reduce_items (0) ...   to { 'a } 
##  reduce_items (0) exit: from ( 'define 'f { 'a } ) 
##  reduce_items (0) ...   to ( `define 'f { 'a } ) 
##  interp_seq (0) entry: ( `define 'f { 'a } ) 
##  interp_seq resolved: ( `define 'f { 'a } ) 
##  reduce_items (0) entry: { 'a } 
##  reduce_items (0) exit: from { 'a } 
##  reduce_items (0) ...   to { 'a } 
##  interp_seq reduced: ( `(f ('a ) x0 = ) ) 
#   0 reduce: [Fun , `(f ('a ) x0 = )  ]
#   0 env:
# env:
#	state: Fun 
#	it = `(f ('a ) x0 = ) 
#   1   expr: 1 
#   1   seme: ( 1N ) 
#   1  value: ( 1 ) 
##  reduce_items (0) entry: ( 1 ) 
##  reduce_items (0) exit: from ( 1 ) 
##  reduce_items (0) ...   to ( 1 ) 
##  interp_seq (0) entry: ( 1 ) 
#   1 reduce: [Fun , `(f ('a ) x1 = ( 1 ) )  ]
#   1 env:
# env:
#	state: Fun 
#	it = `(f ('a ) x1 = ( 1 ) ) 
#   2   expr: end f
#   2   seme: ( end f ) 
#   2  value: ( 'end 'f ) 
##  reduce_items (0) entry: ( 'end 'f ) 
##  reduce_items (0) exit: from ( 'end 'f ) 
##  reduce_items (0) ...   to ( `end 'f ) 
##  interp_seq (0) entry: ( `end 'f ) 
##  interp_seq resolved: ( `end 'f ) 
##  interp_seq reduced: ( `(f ('a ) x1 = ( 1 ) ) ) 
#   2 reduce: [Ok , `(f ('a ) x1 = ( 1 ) )  ]
#   2 env:
# env:
#	state: Ok 
#	it = `(f ('a ) x1 = ( 1 ) ) 
#	f = `(f ('a ) x1 = ( 1 ) ) 
> input: "f (1, 2)"
# phrase: f (1, 2) ; 
#   0   expr: f (1, 2)
#   0   seme: ( f { 1N 2N } ) 
#   0  value: ( 'f { 1 2 } ) 
##  reduce_items (0) entry: ( 'f { 1 2 } ) 
##  reduce_items (0) entry: { 1 2 } 
##  reduce_items (0) exit: from { 1 2 } 
##  reduce_items (0) ...   to { 1 2 } 
##  reduce_items (0) exit: from ( 'f { 1 2 } ) 
##  reduce_items (0) ...   to ( 'f { 1 2 } ) 
##  interp_seq (0) entry: ( 'f { 1 2 } ) 
##  interp_seq resolved: ( `(f ('a ) x1 = ( 1 ) ) { 1 2 } ) 
##  reduce_items (1) entry: { 1 2 } 
##  reduce_items (1) exit: from { 1 2 } 
##  reduce_items (1) ...   to { 1 2 } 
? reduce_fun: number of arguments to `f mismatch
#   0 reduce: [Fatal , null ]
