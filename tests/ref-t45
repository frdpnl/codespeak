> input: "3 ; call it A"
# phrase: 3  ; call it A ; 
#   0   expr: 3 
#   0   seme: ( 3N ) 
#   0  value: ( 3 ) 
##  reduce_items (0) entry: ( 3 ) 
##  interp_seq (0) entry: ( 3 ) 
##  interp_seq resolved: ( 3 ) 
#   0 reduce: [Ok , 3  ]
#   0 env:
# env:
#	state: Ok 
#	it = 3 
#   1   expr: call it A
#   1   seme: ( call it A ) 
#   1  value: ( 'call 'it 'A ) 
##  reduce_items (0) entry: ( 'call 'it 'A ) 
##  interp_seq (0) entry: ( `call 'it 'A ) 
##  interp_seq resolved: ( `call 3 'A ) 
##  interp_seq reduced: ( 3 ) 
#   1 reduce: [Ok , 3  ]
#   1 env:
# env:
#	state: Ok 
#	it = 3 
#	A = 3 
> input: "def f (x,) ; A * x ; end f"
# phrase: def f (x,)  ; A * x  ; end f ; 
#   0   expr: def f (x,) 
#   0   seme: ( def f { x } ) 
#   0  value: ( 'def 'f { 'x } ) 
##  reduce_items (0) entry: ( 'def 'f { 'x } ) 
##  reduce_items (0) entry: { 'x } 
##  interp_seq (0) entry: ( `def 'f { 'x } ) 
##  interp_seq resolved: ( `def 'f { 'x } ) 
##  reduce_items (0) entry: { 'x } 
##  interp_seq reduced: ( `(f ('x ) =0= ) ) 
#   0 reduce: [Fun , `(f ('x ) =0= )  ]
#   0 env:
# env:
#	state: Fun 
#	it = `(f ('x ) =0= ) 
#	A = 3 
#   1   expr: A * x 
#   1   seme: ( A * x ) 
#   1  value: ( 'A '* 'x ) 
##  reduce_items (0) entry: ( 'A '* 'x ) 
##  interp_seq (0) entry: ( 'A `* 'x ) 
#   1 reduce: [Fun , `(f ('x ) =1= ( 3 `* 'x ) )  ]
#   1 env:
# env:
#	state: Fun 
#	it = `(f ('x ) =1= ( 3 `* 'x ) ) 
#	A = 3 
#   2   expr: end f
#   2   seme: ( end f ) 
#   2  value: ( 'end 'f ) 
##  reduce_items (0) entry: ( 'end 'f ) 
##  interp_seq (0) entry: ( `end 'f ) 
##  interp_seq resolved: ( `end 'f ) 
##  interp_seq reduced: ( `(f ('x ) =1= ( 3 `* 'x ) ) ) 
#   2 reduce: [Ok , `(f ('x ) =1= ( 3 `* 'x ) )  ]
#   2 env:
# env:
#	state: Ok 
#	it = `(f ('x ) =1= ( 3 `* 'x ) ) 
#	A = 3 
#	f = `(f ('x ) =1= ( 3 `* 'x ) ) 
> input: "f (-1,) ; print it"
# phrase: f (-1,)  ; print it ; 
#   0   expr: f (-1,) 
#   0   seme: ( f { -1N } ) 
#   0  value: ( 'f { -1 } ) 
##  reduce_items (0) entry: ( 'f { -1 } ) 
##  reduce_items (0) entry: { -1 } 
##  interp_seq (0) entry: ( 'f { -1 } ) 
##  interp_seq resolved: ( `(f ('x ) =1= ( 3 `* 'x ) ) { -1 } ) 
##  reduce_items (1) entry: { -1 } 
##  reduce_fun value: ( 3 `* 'x ) 
##  reduce_items (0) entry: ( 3 `* 'x ) 
##  interp_seq (0) entry: ( 3 `* 'x ) 
##  interp_seq resolved: ( 3 `* 'x ) 
##  interp_seq reduced: ( -3 ) 
##  reduce_fun reduce: [Ok , -3  ]
##  reduce_fun local:
## env:
##	state: Ok 
##	x = -1 
##	it = -3 
## parent ## env:
##	state: Ok 
##	it = `(f ('x ) =1= ( 3 `* 'x ) ) 
##	A = 3 
##	f = `(f ('x ) =1= ( 3 `* 'x ) ) 
##  interp_seq reduced: ( -3 ) 
#   0 reduce: [Ok , -3  ]
#   0 env:
# env:
#	state: Ok 
#	it = -3 
#	A = 3 
#	f = `(f ('x ) =1= ( 3 `* 'x ) ) 
#   1   expr: print it
#   1   seme: ( print it ) 
#   1  value: ( 'print 'it ) 
##  reduce_items (0) entry: ( 'print 'it ) 
##  interp_seq (0) entry: ( `print 'it ) 
##  interp_seq resolved: ( `print -3 ) 
-3 
##  interp_seq reduced: ( -3 ) 
#   1 reduce: [Ok , -3  ]
#   1 env:
# env:
#	state: Ok 
#	it = -3 
#	A = 3 
#	f = `(f ('x ) =1= ( 3 `* 'x ) ) 
> main: exit
> env:
>	state: Ok 
>	it = -3 
>	A = 3 
>	f = `(f ('x ) =1= ( 3 `* 'x ) ) 
