# ----line: "if 2 > 1. ; print correct ; end if"
# --phrase: if 2 > 1.  ; print correct  ; end if ; 
#   0  expr: if 2 > 1. 
#   0  seme: ( if 2N > 1.00R ) 
#   0 value: ( `if 2 `> 1.00 ) 
#   0 reduce: [Ok , 1  ]
env:
	state: Ok 
	it = 1 
#   1  expr: print correct 
#   1  seme: ( print correct ) 
#   1 value: ( `print 'correct ) 
'correct 
#   1 reduce: [Ok , 'correct  ]
env:
	state: Ok 
	it = 'correct 
#   2  expr: end if
#   2  seme: ( end if ) 
#   2 value: ( `end `if ) 
#   2 reduce: [Ok , 'correct  ]
env:
	state: Ok 
	it = 'correct 
# ----line: "if not 2 > 1. ; print it"
# --phrase: if not 2 > 1.  ; print it ; 
#   0  expr: if not 2 > 1. 
#   0  seme: ( if not 2N > 1.00R ) 
#   0 value: ( `if `not 2 `> 1.00 ) 
#   0 reduce: [Skip , 0  ]
env:
	state: Skip 
	it = 0 
#   1  expr: print it
#   1  seme: ( print it ) 
#   1 value: ( `print 0 ) 
#   1 reduce: [Skip , 0  ]
env:
	state: Skip 
	it = 0 
# ----line: "end if"
# --phrase: end if ; 
#   0  expr: end if
#   0  seme: ( end if ) 
#   0 value: ( `end `if ) 
#   0 reduce: [Ok , 0  ]
env:
	state: Ok 
	it = 0 
# ----line: "4. > 2 ; if true? ; print true ; end if"
# --phrase: 4. > 2  ; if true?  ; print true  ; end if ; 
#   0  expr: 4. > 2 
#   0  seme: ( 4.00R > 2N ) 
#   0 value: ( 4.00 `> 2 ) 
#   0 reduce: [Ok , 1  ]
env:
	state: Ok 
	it = 1 
#   1  expr: if true? 
#   1  seme: ( if true? ) 
#   1 value: ( `if `true? ) 
#   1 reduce: [Ok , 1  ]
env:
	state: Ok 
	it = 1 
#   2  expr: print true 
#   2  seme: ( print true ) 
#   2 value: ( `print 'true ) 
'true 
#   2 reduce: [Ok , 'true  ]
env:
	state: Ok 
	it = 'true 
#   3  expr: end if
#   3  seme: ( end if ) 
#   3 value: ( `end `if ) 
#   3 reduce: [Ok , 'true  ]
env:
	state: Ok 
	it = 'true 
# ----line: "4. > 2 ; if false? ; print false ; end if"
# --phrase: 4. > 2  ; if false?  ; print false  ; end if ; 
#   0  expr: 4. > 2 
#   0  seme: ( 4.00R > 2N ) 
#   0 value: ( 4.00 `> 2 ) 
#   0 reduce: [Ok , 1  ]
env:
	state: Ok 
	it = 1 
#   1  expr: if false? 
#   1  seme: ( if false? ) 
#   1 value: ( `if `false? ) 
#   1 reduce: [Skip , 0  ]
env:
	state: Skip 
	it = 0 
#   2  expr: print false 
#   2  seme: ( print false ) 
#   2 value: ( `print 'false ) 
#   2 reduce: [Skip , 0  ]
env:
	state: Skip 
	it = 0 
#   3  expr: end if
#   3  seme: ( end if ) 
#   3 value: ( `end `if ) 
#   3 reduce: [Ok , 0  ]
env:
	state: Ok 
	it = 0 
env:
	state: Ok 
	it = 0 
