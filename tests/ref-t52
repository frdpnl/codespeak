> input: "def f (a,) ; a + 2 ; a return a ;  end f"
# phrase: def f (a,)  ; a + 2  ; a return a  ; end f ; 
#   0   expr: def f (a,) 
#   0   seme: ( def f { a } ) 
#   0  value: ( 'def 'f { 'a } ) 
##  reduce_items (0) entry: ( 'def 'f { 'a } ) 
##  reduce_items (0) entry: { 'a } 
##  reduce_items (0) exit: from { 'a } 
##  reduce_items (0) ...   to { 'a } 
##  reduce_items (0) exit: from ( 'def 'f { 'a } ) 
##  reduce_items (0) ...   to ( `def 'f { 'a } ) 
##  interp_seq (0) entry: ( `def 'f { 'a } ) 
##  interp_seq resolved: ( `def 'f { 'a } ) 
##  reduce_items (0) entry: { 'a } 
##  reduce_items (0) exit: from { 'a } 
##  reduce_items (0) ...   to { 'a } 
##  interp_seq reduced: ( `(f ('a ) x0 = ) ) 
#   0 reduce: [Fun , `(f ('a ) x0 = )  ]
#   0 env:
# env:
#	state: Fun 
#	it = `(f ('a ) x0 = ) 
#   1   expr: a + 2 
#   1   seme: ( a + 2N ) 
#   1  value: ( 'a '+ 2 ) 
##  reduce_items (0) entry: ( 'a '+ 2 ) 
##  reduce_items (0) exit: from ( 'a '+ 2 ) 
##  reduce_items (0) ...   to ( 'a `+ 2 ) 
##  interp_seq (0) entry: ( 'a `+ 2 ) 
#   1 reduce: [Fun , `(f ('a ) x1 = ( 'a `+ 2 ) )  ]
#   1 env:
# env:
#	state: Fun 
#	it = `(f ('a ) x1 = ( 'a `+ 2 ) ) 
#   2   expr: a return a 
#   2   seme: ( a return a ) 
#   2  value: ( 'a 'return 'a ) 
##  reduce_items (0) entry: ( 'a 'return 'a ) 
##  reduce_items (0) exit: from ( 'a 'return 'a ) 
##  reduce_items (0) ...   to ( 'a `return 'a ) 
##  interp_seq (0) entry: ( 'a `return 'a ) 
#   2 reduce: [Fun , `(f ('a ) x2 = ( 'a `+ 2 ) ( 'a `return 'a ) )  ]
#   2 env:
# env:
#	state: Fun 
#	it = `(f ('a ) x2 = ( 'a `+ 2 ) ( 'a `return 'a ) ) 
#   3   expr: end f
#   3   seme: ( end f ) 
#   3  value: ( 'end 'f ) 
##  reduce_items (0) entry: ( 'end 'f ) 
##  reduce_items (0) exit: from ( 'end 'f ) 
##  reduce_items (0) ...   to ( `end 'f ) 
##  interp_seq (0) entry: ( `end 'f ) 
##  interp_seq resolved: ( `end 'f ) 
##  interp_seq reduced: ( `(f ('a ) x2 = ( 'a `+ 2 ) ( 'a `return 'a ) ) ) 
#   3 reduce: [Ok , `(f ('a ) x2 = ( 'a `+ 2 ) ( 'a `return 'a ) )  ]
#   3 env:
# env:
#	state: Ok 
#	it = `(f ('a ) x2 = ( 'a `+ 2 ) ( 'a `return 'a ) ) 
#	f = `(f ('a ) x2 = ( 'a `+ 2 ) ( 'a `return 'a ) ) 
> input: "f (1,)"
# phrase: f (1,) ; 
#   0   expr: f (1,)
#   0   seme: ( f { 1N } ) 
#   0  value: ( 'f { 1 } ) 
##  reduce_items (0) entry: ( 'f { 1 } ) 
##  reduce_items (0) entry: { 1 } 
##  reduce_items (0) exit: from { 1 } 
##  reduce_items (0) ...   to { 1 } 
##  reduce_items (0) exit: from ( 'f { 1 } ) 
##  reduce_items (0) ...   to ( 'f { 1 } ) 
##  interp_seq (0) entry: ( 'f { 1 } ) 
##  interp_seq resolved: ( `(f ('a ) x2 = ( 'a `+ 2 ) ( 'a `return 'a ) ) { 1 } ) 
##  reduce_items (1) entry: { 1 } 
##  reduce_items (1) exit: from { 1 } 
##  reduce_items (1) ...   to { 1 } 
##  reduce_fun value: ( 'a `+ 2 ) 
##  reduce_items (0) entry: ( 'a `+ 2 ) 
##  reduce_items (0) exit: from ( 'a `+ 2 ) 
##  reduce_items (0) ...   to ( 'a `+ 2 ) 
##  interp_seq (0) entry: ( 'a `+ 2 ) 
##  interp_seq resolved: ( 'a `+ 2 ) 
##  interp_seq reduced: ( 3 ) 
##  reduce_fun reduce: [Ok , 3  ]
##  reduce_fun value: ( 'a `return 'a ) 
##  reduce_items (0) entry: ( 'a `return 'a ) 
##  reduce_items (0) exit: from ( 'a `return 'a ) 
##  reduce_items (0) ...   to ( 'a `return 'a ) 
##  interp_seq (0) entry: ( 'a `return 'a ) 
##  interp_seq resolved: ( 'a `return 'a ) 
? reduce_return: 'return' syntax incorrect
##  reduce_fun reduce: [Fatal , null ]
#   0 reduce: [Fatal , null ]
