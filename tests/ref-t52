# ----line: "def f (a,) ; a + 2 ; a return a ;  end f"
# --phrase: def f (a,)  ; a + 2  ; a return a  ; end f ; 
#   0  expr: def f (a,) 
#   0  seme: ( def f { a } ) 
#   0 value: ( `def 'f { 'a } ) 
#   0 reduce: [Fun , `(f ('a ) 0 val)  ]
#   1  expr: a + 2 
#   1  seme: ( a + 2N ) 
#   1 value: ( 'a `+ 2 ) 
#   1 reduce: [Fun , `(f ('a ) 1 val)  ]
#   2  expr: a return a 
#   2  seme: ( a return a ) 
#   2 value: ( 'a `return 'a ) 
#   2 reduce: [Fun , `(f ('a ) 2 val)  ]
#   3  expr: end f
#   3  seme: ( end f ) 
#   3 value: ( `end 'f ) 
#   3 reduce: [Ok , `(f ('a ) 2 val)  ]
Ok 
it = `(f ('a ) 2 val) 
f = `(f ('a ) 2 val) 
# ----line: "f (1,)"
# --phrase: f (1,) ; 
#   0  expr: f (1,)
#   0  seme: ( f { 1N } ) 
#   0 value: ( `(f ('a ) 2 val) { 1 } ) 
- reduce_fun value: ( 'a `+ 2 ) 
- reduce_fun reduce: [Ok , 3  ]
- reduce_fun value: ( 'a `return 'a ) 
? reduce_return: 'return' syntax incorrect
- reduce_fun reduce: [Fatal , null ]
#   0 reduce: [Fatal , null ]
