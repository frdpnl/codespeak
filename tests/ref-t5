# ----line: "2 * 2. - 1 ; call it n"
# --phrase: 2 * 2. - 1  ; call it n ; 
#   0  expr: 2 * 2. - 1 
#   0  seme: ( 2N * 2.00R - 1N ) 
#   0 value: ( 2 `* 2.00 `- 1 ) 
#  eval_seq >> `* of ( 2 `* 2.00 `- 1 ) 
#  eval_seq << OK ( 4.00 `- 1 ) 
#  eval_seq >> `- of ( 4.00 `- 1 ) 
#  eval_seq << OK ( 3.00 ) 
#   0  eval: OK 3.00 
#   0   env: it=3.00  
#   1  expr: call it n
#   1  seme: ( call it n ) 
#   1 value: ( `call 3.00 'n ) 
#  eval_seq >> `call of ( `call 3.00 'n ) 
#  eval_seq << OK ( 3.00 ) 
#   1  eval: OK 3.00 
#   1   env: it=3.00  n=3.00  
# ----line: "1., +, 2 ; call it A"
# --phrase: 1., +, 2  ; call it A ; 
#   0  expr: 1., +, 2 
#   0  seme: { 1.00R + 2N } 
#   0 value: { 1.00 `+ 2 } 
#   0  eval: OK { 1.00 `+ 2 } 
#   0   env: it={ 1.00 `+ 2 }  n=3.00  
#   1  expr: call it A
#   1  seme: ( call it A ) 
#   1 value: ( `call { 1.00 `+ 2 } 'A ) 
#  eval_seq >> `call of ( `call { 1.00 `+ 2 } 'A ) 
#  eval_seq << OK ( { 1.00 `+ 2 } ) 
#   1  eval: OK { 1.00 `+ 2 } 
#   1   env: it={ 1.00 `+ 2 }  n=3.00  A={ 1.00 `+ 2 }  
# ----line: "do A ; "
# --phrase: do A  ; 
#   0  expr: do A 
#   0  seme: ( do A ) 
#   0 value: ( `do 'A ) 
#  eval_seq >> `do of ( `do 'A ) 
#  eval_seq >> `+ of ( 1.00 `+ 2 ) 
#  eval_seq << OK ( 3.00 ) 
#  eval_seq << OK ( 3.00 ) 
#   0  eval: OK 3.00 
#   0   env: it=3.00  n=3.00  A={ 1.00 `+ 2 }  
# ----line: "it = n ; print it"
# --phrase: it = n  ; print it ; 
#   0  expr: it = n 
#   0  seme: ( it = n ) 
#   0 value: ( 3.00 `= 'n ) 
#  eval_seq >> `= of ( 3.00 `= 'n ) 
#  eval_seq << OK ( 1 ) 
#   0  eval: OK 1 
#   0   env: it=1  n=3.00  A={ 1.00 `+ 2 }  
#   1  expr: print it
#   1  seme: ( print it ) 
#   1 value: ( `print 1 ) 
#  eval_seq >> `print of ( `print 1 ) 
1 
#  eval_seq << OK ( 1 ) 
#   1  eval: OK 1 
#   1   env: it=1  n=3.00  A={ 1.00 `+ 2 }  
