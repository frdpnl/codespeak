> input: "rem: recursive logistic equation"
> input: "def lgc (x,r,n)"
> input: "	if n <= 1 "
> input: "		r * x * (1 - x) "
> input: "		return"
> input: "	end if"
> input: "	lgc (x, r, (n - 1)) ; call it y"
> input: "	r * y * (1 - y) "
> input: "end lgc"
> input: "call 0.2 x0"
> input: "lgc (x0, 3.2, 40) ; call it A"
> input: "def make-lgc (r,)"
> input: "	def f (x, n) ; lgc (x, r, n) ; end f"
> input: "end make-lgc"
> input: "make-lgc (3.2,) ; call it lgc32"
> input: "lgc32 (x0, 38) ; call it B"
> input: "A = B ; print it"
1 
> env:
> state: Ok 
> __it__ = 1 
> __nested_loops__ = 0 
> lgc = 
> `lgc ('x 'r 'n ) [7]:
>    ( `if 'n `<= 1 ) 
>    ( 'r `* 'x `* ( 1 '- 'x ) ) 
>    ( `return ) 
>    ..
>    ( `call 'it 'y ) 
>    ( 'r `* 'y `* ( 1 '- 'y ) ) 
> x0 = 0.20 
> A = 0.80 
> make-lgc = 
> `make-lgc ('r ) [3]:
>    ( `def 'f { 'x 'n } ) 
>    ( 
 `lgc ('x 'r 'n ) [7]:
    ( `if 'n `<= 1 ) 
    ( 'r `* 'x `* ( 1 '- 'x ) ) 
    ( `return ) 
    ..
    ( `call 'it 'y ) 
    ( 'r `* 'y `* ( 1 '- 'y ) ) { 'x 'r 'n } ) 
>    ( `end 'f ) 
> lgc32 = 
> `f ('x 'n ) [1]:
>    ( 
 `lgc ('x 'r 'n ) [7]:
    ( `if 'n `<= 1 ) 
    ( 'r `* 'x `* ( 1 '- 'x ) ) 
    ( `return ) 
    ..
    ( `call 'it 'y ) 
    ( 'r `* 'y `* ( 1 '- 'y ) ) { 'x 3.20 'n } ) 
> B = 0.80 
> bye!
