> input: "3 ; call it a"
# phrase: 3  ; call it a ; 
#   0   expr: 3 
#   0   seme: ( 3N ) 
#   0  value: ( 3 ) 
##  reduce_items (0) entry: ( 3 ) 
##  interp_seq (0) entry: ( 3 ) 
##  interp_seq resolved: ( 3 ) 
#   0 reduce: [Ok , 3  ]
#   0 env:
# env:
#	state: Ok 
#	it = 3 
#   1   expr: call it a
#   1   seme: ( call it a ) 
#   1  value: ( 'call 'it 'a ) 
##  reduce_items (0) entry: ( 'call 'it 'a ) 
##  interp_seq (0) entry: ( `call 'it 'a ) 
##  interp_seq resolved: ( `call 3 'a ) 
##  interp_seq reduced: ( 3 ) 
#   1 reduce: [Ok , 3  ]
#   1 env:
# env:
#	state: Ok 
#	it = 3 
#	a = 3 
> input: "4 ; call it b"
# phrase: 4  ; call it b ; 
#   0   expr: 4 
#   0   seme: ( 4N ) 
#   0  value: ( 4 ) 
##  reduce_items (0) entry: ( 4 ) 
##  interp_seq (0) entry: ( 4 ) 
##  interp_seq resolved: ( 4 ) 
#   0 reduce: [Ok , 4  ]
#   0 env:
# env:
#	state: Ok 
#	it = 4 
#	a = 3 
#   1   expr: call it b
#   1   seme: ( call it b ) 
#   1  value: ( 'call 'it 'b ) 
##  reduce_items (0) entry: ( 'call 'it 'b ) 
##  interp_seq (0) entry: ( `call 'it 'b ) 
##  interp_seq resolved: ( `call 4 'b ) 
##  interp_seq reduced: ( 4 ) 
#   1 reduce: [Ok , 4  ]
#   1 env:
# env:
#	state: Ok 
#	it = 4 
#	a = 3 
#	b = 4 
> input: "if a > b"
# phrase: if a > b ; 
#   0   expr: if a > b
#   0   seme: ( if a > b ) 
#   0  value: ( 'if 'a '> 'b ) 
##  reduce_items (0) entry: ( 'if 'a '> 'b ) 
##  interp_seq (0) entry: ( `if 'a `> 'b ) 
##  interp_seq resolved: ( `if 'a `> 'b ) 
##  interp_seq reduced: ( `if 0 ) 
##  interp_seq reduced: ( 0 ) 
#   0 reduce: [Skip , 0  ]
#   0 env:
# env:
#	state: Skip 
#	it = 0 
#	a = 3 
#	b = 4 
> input: "	a - b; print it"
# phrase: a - b ; print it ; 
#   0   expr: a - b
#   0   seme: ( a - b ) 
#   0  value: ( 'a '- 'b ) 
##  reduce_items (0) entry: ( 'a '- 'b ) 
##  interp_seq (0) entry: ( 'a `- 'b ) 
#   0 reduce: [Skip , 0  ]
#   0 env:
# env:
#	state: Skip 
#	it = 0 
#	a = 3 
#	b = 4 
#   1   expr: print it
#   1   seme: ( print it ) 
#   1  value: ( 'print 'it ) 
##  reduce_items (0) entry: ( 'print 'it ) 
##  interp_seq (0) entry: ( `print 'it ) 
#   1 reduce: [Skip , 0  ]
#   1 env:
# env:
#	state: Skip 
#	it = 0 
#	a = 3 
#	b = 4 
> input: "end if"
# phrase: end if ; 
#   0   expr: end if
#   0   seme: ( end if ) 
#   0  value: ( 'end 'if ) 
##  reduce_items (0) entry: ( 'end 'if ) 
##  interp_seq (0) entry: ( `end `if ) 
##  interp_seq resolved: ( `end `if ) 
##  interp_seq reduced: ( 0 ) 
#   0 reduce: [Ok , 0  ]
#   0 env:
# env:
#	state: Ok 
#	it = 0 
#	a = 3 
#	b = 4 
> input: "print it"
# phrase: print it ; 
#   0   expr: print it
#   0   seme: ( print it ) 
#   0  value: ( 'print 'it ) 
##  reduce_items (0) entry: ( 'print 'it ) 
##  interp_seq (0) entry: ( `print 'it ) 
##  interp_seq resolved: ( `print 0 ) 
0 
##  interp_seq reduced: ( 0 ) 
#   0 reduce: [Ok , 0  ]
#   0 env:
# env:
#	state: Ok 
#	it = 0 
#	a = 3 
#	b = 4 
> input: "if false? ; print it ; end if"
# phrase: if false?  ; print it  ; end if ; 
#   0   expr: if false? 
#   0   seme: ( if false? ) 
#   0  value: ( 'if 'false? ) 
##  reduce_items (0) entry: ( 'if 'false? ) 
##  interp_seq (0) entry: ( `if `false? ) 
##  interp_seq resolved: ( `if `false? ) 
##  interp_seq reduced: ( `if 1 ) 
##  interp_seq reduced: ( 1 ) 
#   0 reduce: [Ok , 1  ]
#   0 env:
# env:
#	state: Ok 
#	it = 1 
#	a = 3 
#	b = 4 
#   1   expr: print it 
#   1   seme: ( print it ) 
#   1  value: ( 'print 'it ) 
##  reduce_items (0) entry: ( 'print 'it ) 
##  interp_seq (0) entry: ( `print 'it ) 
##  interp_seq resolved: ( `print 1 ) 
1 
##  interp_seq reduced: ( 1 ) 
#   1 reduce: [Ok , 1  ]
#   1 env:
# env:
#	state: Ok 
#	it = 1 
#	a = 3 
#	b = 4 
#   2   expr: end if
#   2   seme: ( end if ) 
#   2  value: ( 'end 'if ) 
##  reduce_items (0) entry: ( 'end 'if ) 
##  interp_seq (0) entry: ( `end `if ) 
##  interp_seq resolved: ( `end `if ) 
##  interp_seq reduced: ( 1 ) 
#   2 reduce: [Ok , 1  ]
#   2 env:
# env:
#	state: Ok 
#	it = 1 
#	a = 3 
#	b = 4 
> main: exit
> env:
>	state: Ok 
>	it = 1 
>	a = 3 
>	b = 4 
